#!/usr/bin/env ruby

require 'open3'
require 'json'

def usage
  'Usage: new <profile|role|test> NAME'
end

# Validate and process arguments
if ARGV.length != 2
  puts usage()
  exit(1)
end

type = ARGV.shift
name = ARGV.shift
create_test_only = false

unless ['profile', 'role', 'test'].include?(type)
  puts "Invalid type #{type} - must be 'profile', 'role', or 'test'"
  puts usage()
  exit(1)
end

if type == 'test'
  unless name =~ /^(profile|role)::/
    STDERR.puts "ERROR: Class name must start with 'profile::' or 'role::'"
    exit(1)
  end
  create_test_only = true
  type, name = name.split('::')
else
  name = name.sub(/^#{type}::/,'')
end

# Determine repository name
toplevel = `git rev-parse --show-toplevel`.strip
begin
  metadata_file = File.open("#{toplevel}/metadata.json")
  metadata = JSON.load(metadata_file)
  repo_name = metadata['name'].split('-')[1]
rescue Exception => e
  STDERR.puts "Failed to read metadata.json file: #{e}"
end

# Check for existing class
manifest_path = "#{toplevel}/site/#{type}/manifests/#{name}.pp"
manifest_exists = File.exist? manifest_path
spec_path = "#{toplevel}/spec/classes/#{type}/#{name}_spec.rb"
spec_exists = File.exist? spec_path
if create_test_only
  unless manifest_exists
    STDERR.puts "ERROR: Manifest #{manifest_path} does not exist"
    exit(1)
  end
else
  if manifest_exists
    STDERR.puts "ERROR: Manifest #{manifest_path} already exists"
    exit(1)
  end
end
if spec_exists
  STDERR.puts "ERROR: Test file #{spec_path} already exists"
  exit(1)
end

# Create new class with PDK - need to remove any variables already set by PDK
env = ENV.delete_if { |env| env =~ /^(GEM|RUBY|BUNDLE|PUPPET)/ }
stdout, stderr, status = Open3.capture3(env, 'pdk', 'new', 'class', "#{type}::#{name}", unsetenv_others: true)
unless status.success?
  puts stderr
  exit status.exitstatus
end

# Determine which files were created
manifest = stdout.split("\n").select { |line| line =~ /#{name}.pp/ }.pop
spec = stdout.split("\n").select { |line| line =~ /#{name}_spec.rb/ }.pop
if manifest.nil? or spec.nil?
  puts "Failed to find file paths in PDK output:\nSTDOUT: #{stdout}\nSTDERR:#{stderr}"
  exit(1)
end

# Strip out repo name from created files
stdout, stderr, status = Open3.capture3("sed -i 's/#{repo_name}:://g' #{manifest} #{spec}")
unless status.success?
  puts stderr
  exit status.exitstatus
end

# Move manifest into site directory if creating profile or role
# or delete manifest if just creating spec file
if create_test_only
  File.unlink(manifest)
else
  manifest_new = manifest.sub(%r{manifests/#{type}}, "site/#{type}/manifests")
  File.rename(manifest, manifest_new)
end

if create_test_only
  puts "New test #{type}::#{name} created successfully:"
else
  puts "New #{type} #{name} created successfully:"
  puts "Manifest: #{manifest_new}"
end
puts "Spec file: #{spec}"